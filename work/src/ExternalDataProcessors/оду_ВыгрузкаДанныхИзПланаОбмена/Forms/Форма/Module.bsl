
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьПараметрыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеПроизвольногоЗапроса(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли; 
	
	//СтруктураПараметров = Параметры.СтруктураПараметров;
	
	ДанныхОбмена = РезультатВыполненияРегламентаПроизвольногоЗапроса();
	Если ИнтерактивныйВызов = Ложь Тогда
		Закрыть(ДанныхОбмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроизвольныйЗапрос(Команда)
	ОбработатьПроизвольныйЗапросНаСервере(Параметры.СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроизвольныйОтвет(Команда)
	ОбработатьПроизвольныйОтветНаСервере(Параметры.СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	Если Параметры.СтруктураПараметров = Неопределено  Тогда
		ИнтерактивныйВызов = Истина;
	Иначе 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураПараметров, Параметры.СтруктураПараметров.СписокСвойств); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса) Экспорт
	
	КаталогОбменаПЗ = "";
	Если ЗначениеЗаполнено(ИмяБазыПриемника) И ЗначениеЗаполнено(ИмяЗапроса)  Тогда
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		КаталогОбменаПЗ = оду_Общий.КаталогФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника);
		Если ЗначениеЗаполнено(КаталогОбменаПЗ)  Тогда
			КаталогОбменаПЗ = СтрШаблон("%1\%2\%3", КаталогОбменаПЗ, "arbitraryRequests", ИмяЗапроса);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат КаталогОбменаПЗ;
	
КонецФункции

Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль)
	
	Попытка
	
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		ЗаполнитьЗначенияСвойств(СтруктураЗапроса, ЭтаФорма); 
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		//СтруктураНастроек.ВыполнятьВФоне = Истина;
		//СтруктураНастроек.ОбменЧерезФайл = Истина;
		//из группы ГруппаПараметрыЗапроса
		ПараметрыЗапроса = Новый Структура(); 
		
		СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		
		СтруктураЗапроса.ИДБазыПриемник = пр_Общий.ИД_Ссылки(УчастникОбмена);
		//СтруктураЗапроса.ИДБазыИсточник = ИДБазыИсточник;
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним;
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		СтруктураЗапроса.Пользователь = Строка(пр_НастройкиПовтИсп.ТекущийПользователь());
		//СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		оду_Общий.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 


&НаСервере
Функция РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса = Неопределено)
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль);
	КонецЕсли; 
	
	Обр = РеквизитФормыВЗначение("Объект");
	ДанныхОбмена = Обр.РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса);
	                   
	Если ИнтерактивныйВызов = Истина Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
			Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
				ИмяБазыПриемника = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "Код");
				КаталогОбмена = ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса);
			КонецЕсли; 
			
			ИмяФайла = Формат(ТекущаяДатаСеанса(), "ДФ='yyyy MM dd'"); 
			ИмяФайлаЗапроса = пр_Общий.ПолныйПутьКФайлу(, ИмяФайла, КаталогОбмена, , Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
			//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныхОбмена, ИмяФайлаЗапроса);	
			ТелоЗапроса = Обр.СформироватьJSON_Сериализ(ДанныхОбмена, ИмяФайлаЗапроса);	
		КонецЕсли;
		
	КонецЕсли; 
	Возврат ДанныхОбмена;
	
КонецФункции

&НаСервере
Процедура ОбработатьПроизвольныйЗапросНаСервере(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
		Обр = РеквизитФормыВЗначение("Объект");
		ДанныеОтвета = Обр.ОбработатьПроизвольныйЗапрос(ИмяФайлаЗапроса);
		
		Если ИнтерактивныйВызов = Истина Тогда
			
			//Если НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
				Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
					ИмяБазыПриемника = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "Код");
					КаталогОбмена = ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса);
				КонецЕсли; 
				
				ИмяФайла = Формат(ТекущаяДатаСеанса(), "ДФ='yyyy MM dd'") + " Ответ"; 
				ИмяФайлаЗапроса = пр_Общий.ПолныйПутьКФайлу(, ИмяФайла, КаталогОбмена, , Истина);
				
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
				//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныеОтвета, ИмяФайлаЗапроса);
				ТелоЗапроса = Обр.СформироватьJSON_Сериализ(ДанныеОтвета, ИмяФайлаЗапроса);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПроизвольныйОтветНаСервере(СтруктураПараметров)
	Обр = РеквизитФормыВЗначение("Объект");
	Обр.ОбработатьПроизвольныйОтвет(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "КаталогОбмена", Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗапросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаталогОбмена)  Тогда
		//пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса",, КаталогОбмена);
		УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса",, КаталогОбмена);
	Иначе	
		пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса");
		НачПоз = СтрНайти(ИмяФайлаЗапроса,"\",НаправлениеПоиска.СКонца) - 1;
		КаталогОбмена = Лев(ИмяФайлаЗапроса, НачПоз);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УстановкаКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла = Истина, КаталогПоУмолчанию = "", МножественныйВыбор = Ложь)	Экспорт
	пр_Клиент.РезультатУстановкиКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла, КаталогПоУмолчанию, МножественныйВыбор);	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПараметровЗапросаЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекЭлемент = Элементы.ТаблицаПараметровЗапроса.ТекущиеДанные;
	
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	пр_Клиент.Объект1СОкончаниеВводаТекста(ТекЭлемент.Значение, Текст, СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли; 
	
	ВыполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере()
	Обр = РеквизитФормыВЗначение("Объект");
	//TODO:  Пропиать заполенние пользовательских настроек из Формы и ТаблицаПараметровЗапроса
	СтруктураЗапроса = Неопределено;
	ДанныеОтвета = Обр.РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса);
КонецПроцедуры

//&НаКлиенте
//Процедура УстановкаКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла = Истина, КаталогПоУмолчанию = "", МножественныйВыбор = Ложь)	Экспорт
//	
//	Каталог = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора(ВыборФайла, КаталогПоУмолчанию, МножественныйВыбор);
//	Если ЗначениеЗаполнено(Каталог)  Тогда
//		Форма[ИмяРеквизита] = Каталог; 
//	КонецЕсли; 

//КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

#КонецОбласти

