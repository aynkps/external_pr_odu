//1. При внедрении заменить имена "ЗаменаИмяОбработки" функций Запрос, Ответ, ОбработкаОтвета на Имя обработки (например "РегламентУстановкиРозничныхЦенМП_")
//2. Если нужно скорретировать параметры в функции ПолучитьСтруктуруНастроекЗапроса
//3. После отладки, при внедрении перенести полностью область Имя обработки (например "РегламентУстановкиРозничныхЦенМП_") в ОМ.оду_ОбменДанными 
//4. В ОМ.оду_ОбменДанными убрать лишние методы обработки 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	//Номер задачи Текст задачи Исполнитель Дата
	ПараметрыРегистрации.Версия = "2024-01-26";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОбработки; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента");
	
	//ПараметрыРегистрации.Информация = "кпс_"; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОбработки;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//СтрТаблицы.ПоказыватьОповещение = Истина;
	//СтрТаблицы.Модификатор = "ПечатьMXL";
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	РезультатВыполнения = РезультатВыполненияРегламентаПроизвольногоЗапроса();
	
КонецПроцедуры

//TODO:  Получать настройки динамичестки из ОбработкиПроизвольногоЗапроса и  С_оду_БазыУчастникиОбмена, и РС_Настроек
Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, пр_МодульПов, ВДЗ, ТекущийПользователь, НастройкиТекущейБД)
	
	Попытка
		
		ИДБазыПриемник = ВДЗ.ИДБазыПриемник; //Тест  ytaptest6
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		СтруктураЗапроса.ИДБазыИсточник = НастройкиТекущейБД.ИДБазыИсточник;
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним;
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		СтруктураЗапроса.ВыполнятьВФоне = Истина;
		СтруктураЗапроса.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(ТекущийПользователь);
		СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		пр_Модуль.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		ПараметрыЗапроса = Новый Структура(); 
		ПараметрыЗапроса.Вставить("оду_УзелПланаОбмена", ВДЗ.оду_УзелПланаОбмена);
		ПараметрыЗапроса.Вставить("ИмяКаталогаПриемника", ВДЗ.ИмяКаталогаПриемника);

		ПолныйПутьККаталогу = пр_Модуль.КаталогФайлаОбмена(НастройкиТекущейБД, ВДЗ.ИмяКаталогаПриемника);
		ПараметрыЗапроса.Вставить("ПолныйПутьККаталогу", ПолныйПутьККаталогу);
		
		ПараметрыКонвертации = пр_МодульПов.ПараметрыКонвертацииОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ); 
		ПараметрыКонвертации.Вставить("оду_УзелПланаОбмена", ВДЗ.оду_УзелПланаОбмена);
		
		ПараметрыЗапроса.Вставить("ПараметрыКонвертации", ПараметрыКонвертации);
		
		СтруктураЗапроса.ПараметрыЗапроса = ПараметрыЗапроса;
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса = Неопределено) Экспорт
	
	ТекущийПользователь = пр_НастройкиПовтИсп.ТекущийПользователь();
	
	пр_МодульПов = пр_Общий.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	НастройкиТекущейБД = пр_МодульПов.НастройкиТекущейБД();
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	оду_БазыУчастникиОбмена.ПланОбмена КАК оду_УзелПланаОбмена,
		|	&ИДОбъекта КАК ИДОбъекта,
		|	&ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазыПриемник,
		|	оду_БазыУчастникиОбмена.Код КАК ИмяБазыПриемника,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена КАК ИмяКаталогаПриемника,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки, ЛОЖЬ) КАК РежимОтладкиКД,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки, ЛОЖЬ) = ИСТИНА
		|				ТОГДА ВЫБОР
		|						КОГДА оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП = ИСТИНА
		|							ТОГДА оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП
		|						ИНАЧЕ оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки
		|					КОНЕЦ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОД КАК ПОД,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПравилоВыгрузки КАК ПравилоВыгрузки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПравилоЗагрузки КАК ПравилоЗагрузки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОДИзФайла КАК ПОДИзФайла,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКПОД КАК ПутьКПОД,
		|	""ВыгрузкаДанныхИзПланаОбмена"" КАК ИмяПВД
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
		//|	И оду_БазыУчастникиОбмена.Ссылка.ТекущаяБД = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА оду_БазыУчастникиОбмена.Ссылка.ЭтоРабочаяБД = ИСТИНА
		|					И &ТекущаяРабочаяБД = ЛОЖЬ
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ   
		|	ВТ_Данные.УО КАК УО,
		|	ВТ_Данные.оду_УзелПланаОбмена КАК оду_УзелПланаОбмена,
		|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Данные.ИмяБазыПриемника КАК ИмяБазыПриемника,
		|	ВТ_Данные.ИмяКаталогаПриемника КАК ИмяКаталогаПриемника,
		|	ВТ_Данные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_Данные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Данные.РежимОтладкиКД КАК РежимОтладкиКД,
		|	ВТ_Данные.ОбработкаОтладки КАК ОбработкаОтладки,
		|	ВТ_Данные.РежимОтладки КАК РежимОтладки,
		|	ВТ_Данные.ПОД КАК ПОД,
		|	ВТ_Данные.ПравилоВыгрузки КАК ПравилоВыгрузки,
		|	ВТ_Данные.ПравилоЗагрузки КАК ПравилоЗагрузки,
		|	ВТ_Данные.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_Данные.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	ВТ_Данные.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	ВТ_Данные.ПОДИзФайла КАК ПОДИзФайла,
		|	ВТ_Данные.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	ВТ_Данные.ПутьКПОД КАК ПутьКПОД,
		|	ВТ_Данные.ИмяПВД КАК ИмяПВД,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО ВТ_Данные.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И ВТ_Данные.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|			И ВТ_Данные.ИДБазыИсточник = оду_СостояниеОбъектовОбмена.ИДБазыИсточник
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL
		|";
		
	
	Запрос.УстановитьПараметр("ИДОбъекта", "оду_ВыгрузкаДанныхИзПланаОбмена");
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	Запрос.УстановитьПараметр("ТекущаяРабочаяБД", НастройкиТекущейБД.ЭтоРабочаяБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, пр_МодульПов, ВДЗ, ТекущийПользователь, НастройкиТекущейБД);
		
		РезультатЗапроса = оду_ВыгрузкаДанныхИзПланаОбмена_Запрос(СтруктураЗапроса); 
		
		Возврат РезультатЗапроса;
		
		//РезультатЗапроса = пр_Модуль.РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, ЭтотОбъект); 
		//
		//Если РезультатЗапроса = Неопределено Тогда
		//	Возврат Неопределено;	
		//КонецЕсли; 
		//
		//Если СтруктураЗапроса.ПодготовитьДанные = Истина  Тогда
		//	Возврат РезультатЗапроса;	
		//КонецЕсли; 
		
		//РезультатОбработкиОтвета = оду_ВыгрузкаДанныхИзПланаОбмена_ОбработкаОтвета(РезультатЗапроса);
		
		//Возврат РезультатОбработкиОтвета;
		//
		//ВыгрузкаДанныхИзПланаОбменаПоУзлу(ВДЗ);	
		
		
	КонецЦикла;	

	
КонецФункции 

#Область  ДляОтладкиБезФоновомРежиме

Функция оду_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	Возврат оду_ВыгрузкаДанныхИзПланаОбмена_Запрос(СтруктураЗапроса);
КонецФункции 

Функция оду_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	Возврат оду_ВыгрузкаДанныхИзПланаОбмена_Ответ(СтруктураЗапроса);
КонецФункции 

Функция оду_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	Возврат оду_ВыгрузкаДанныхИзПланаОбмена_ОбработкаОтвета(СтруктураЗапроса);
КонецФункции 

#КонецОбласти


//TODO:  Перенести после отладки в ОМ.оду_ОбменДанными
#Область  оду_ВыгрузкаДанныхИзПланаОбмена_
 
#Область  Запрос

//СтруктураЗапроса
Функция оду_ВыгрузкаДанныхИзПланаОбмена_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Для примера
		Если ПараметрыЗапроса = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли; 

		
		оду_УзелПланаОбмена = ПараметрыЗапроса.оду_УзелПланаОбмена;
		
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, оду_УзелПланаОбмена);
		НомерСообщения = ЗаписьСообщения.НомерСообщения;
		
		ВДЗ = ПланыОбмена.ВыбратьИзменения(оду_УзелПланаОбмена, НомерСообщения);//, ФильтрОбмена);
		
		Данные = Новый Массив;
		
		Если ВДЗ.Следующий() Тогда
			Зареганые = ВДЗ.Получить();
			Данные.Добавить(Зареганые);
		КонецЕсли; 
		
		ЗаписьСообщения.ЗакончитьЗапись();
		ЗаписьXML.Закрыть();
		
		Если Данные.Количество() = 0 Тогда 
			Возврат Неопределено;	
		КонецЕсли;
		
		СтруктураЗапроса.НомерЭтапаЗапроса = НомерСообщения;
		
		ИмяФайлаЗапроса = СтрШаблон("%1\UOD_%2.xml", ПараметрыЗапроса.ПолныйПутьККаталогу, НомерСообщения);

		СтруктураЗапроса.ИмяФайлаЗапроса = ИмяФайлаЗапроса;

		РезультатВыгрузки = РезультатВыгрузки(СтруктураЗапроса);
		Возврат РезультатВыгрузки;	
		
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыгрузки(СтруктураЗапроса)
	
	Попытка
	
		ТекущийПользователь = пр_НастройкиПовтИсп.ТекущийПользователь();
		пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	
		ПараметрыКонвертации = СтруктураЗапроса.ПараметрыЗапроса.ПараметрыКонвертации;
		ТаблицаСостоянийОбмена = пр_Модуль.ТаблицаСостоянийОбмена();
		Нстр = ТаблицаСостоянийОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр, СтруктураЗапроса); 
		Нстр.ДатаВыгрузки 	= СтруктураЗапроса.ДатаСобытия;
		//Нстр.ИДОбъекта 		= СтруктураЗапроса.ИДЗапроса;
		Нстр.ИДОбъекта 		= СтрШаблон("UOD_%1", СтруктураЗапроса.НомерЭтапаЗапроса);
		
		Нстр.ИмяФайлаОбмена 		= СтруктураЗапроса.ИмяФайлаЗапроса;
		Нстр.КонфигурацияКонвертацииОбмена = СтруктураЗапроса.ПараметрыЗапроса.ПараметрыКонвертации.КонфигурацияКонвертацииОбмена;
		Нстр.ПриоритетДопПризнака 		= СтруктураЗапроса.НомерЭтапаЗапроса;
		Нстр.РежимОбмена 		= оду_ОбщийПовтИсп.РежимВыгрузка();
		Нстр.СостояниеОбмена 		= оду_ОбщийПовтИсп.СостояниеВыгрузка();
		
		
		СтрокаОтветаОбмена = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, , СтруктураЗапроса.ИмяФайлаЗапроса, , ПараметрыКонвертации);
		
		//TODO:  Написать функциию обработки ответа
		ДанныеЗапроса = Неопределено;
		Данные = Новый Структура();

		
		Возврат Данные;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область  Ответ

Функция оду_ВыгрузкаДанныхИзПланаОбмена_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Написать функциию обработки ответа
		//ДанныеОвета = ИмяЗапроса_Запрос(СтруктураЗапроса, ИмяЗапроса);
		ДанныеОвета = Неопределено;
		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_Ответ", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#Область  ОбработкаОтвета
 
Функция оду_ВыгрузкаДанныхИзПланаОбмена_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		
		//TODO:  Написать функциию обработки ответа
		ДанныеОбработкиОтвета = Неопределено;
		Возврат ДанныеОбработкиОтвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_ОбработкаОтвета", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли
